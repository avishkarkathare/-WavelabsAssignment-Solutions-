#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

int networkDelayTime(vector<vector<int>>& times, int n, int k) {
    // Initialize distance array
    vector<int> dist(n+1, INT_MAX);
    dist[k] = 0;

    // Create adjacency list to represent graph
    vector<vector<pair<int, int>>> adj(n+1);
    for (auto& time : times) {
        adj[time[0]].push_back({time[1], time[2]});
    }

    // Create priority queue and add starting node
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, k});

    // Run Dijkstra's algorithm
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        for (auto& edge : adj[u]) {
            int v = edge.first, w = edge.second;
            if (dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                pq.push({dist[v], v});
            }
        }
    }

    // Find maximum distance in dist array
    int maxDist = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == INT_MAX) return -1;
        maxDist = max(maxDist, dist[i]);
    }
    return maxDist;
}

int main() {
    vector<vector<int>> times = {{2,1,1},{2,3,1},{3,4,1}};
    int n = 4, k = 2;
    int result = networkDelayTime(times, n, k);
    cout << result << endl; // Output: 2
    return 0;
}
